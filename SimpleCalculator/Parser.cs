// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LAPTOP-MSI
// DateTime: 26.03.2019 22:21:57
// UserName: krzys
// Input file <Parser.y - 26.03.2019 22:21:31>

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleCalculator
{
public enum Tokens {error=63,EOF=64,IntLiteral=65,DecimalLiteral=66,
    Identifier=67,UMINUS=68};

public struct ValueType
#line 3 "Parser.y"
       { 
	public decimal DecimalValue; 
	public int IntValue;
	public string IdentifierValue; 
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[21];
  private static State[] states = new State[31];
  private static string[] nonTerms = new string[] {
      "expression", "number", "decimal_literal", "int_literal", "identifier", 
      "statements", "$accept", "statement", };

  static Parser() {
    states[0] = new State(-2,new int[]{-6,1});
    states[1] = new State(new int[]{64,2,63,5,40,16,45,19,67,22,65,25,66,27,59,-5},new int[]{-8,3,-1,7,-5,28,-2,23,-4,24,-3,26});
    states[2] = new State(-1);
    states[3] = new State(new int[]{59,4});
    states[4] = new State(-3);
    states[5] = new State(new int[]{59,6});
    states[6] = new State(-4);
    states[7] = new State(new int[]{42,8,47,10,43,12,45,14,59,-6});
    states[8] = new State(new int[]{40,16,45,19,67,22,65,25,66,27},new int[]{-1,9,-5,21,-2,23,-4,24,-3,26});
    states[9] = new State(-9);
    states[10] = new State(new int[]{40,16,45,19,67,22,65,25,66,27},new int[]{-1,11,-5,21,-2,23,-4,24,-3,26});
    states[11] = new State(-10);
    states[12] = new State(new int[]{40,16,45,19,67,22,65,25,66,27},new int[]{-1,13,-5,21,-2,23,-4,24,-3,26});
    states[13] = new State(new int[]{42,8,47,10,43,-11,45,-11,59,-11,41,-11});
    states[14] = new State(new int[]{40,16,45,19,67,22,65,25,66,27},new int[]{-1,15,-5,21,-2,23,-4,24,-3,26});
    states[15] = new State(new int[]{42,8,47,10,43,-12,45,-12,59,-12,41,-12});
    states[16] = new State(new int[]{40,16,45,19,67,22,65,25,66,27},new int[]{-1,17,-5,21,-2,23,-4,24,-3,26});
    states[17] = new State(new int[]{41,18,42,8,47,10,43,12,45,14});
    states[18] = new State(-8);
    states[19] = new State(new int[]{40,16,45,19,67,22,65,25,66,27},new int[]{-1,20,-5,21,-2,23,-4,24,-3,26});
    states[20] = new State(-13);
    states[21] = new State(-14);
    states[22] = new State(-20);
    states[23] = new State(-15);
    states[24] = new State(-16);
    states[25] = new State(-18);
    states[26] = new State(-17);
    states[27] = new State(-19);
    states[28] = new State(new int[]{61,29,42,-14,47,-14,43,-14,45,-14,59,-14});
    states[29] = new State(new int[]{40,16,45,19,67,22,65,25,66,27},new int[]{-1,30,-5,21,-2,23,-4,24,-3,26});
    states[30] = new State(new int[]{42,8,47,10,43,12,45,14,59,-7});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-7, new int[]{-6,64});
    rules[2] = new Rule(-6, new int[]{});
    rules[3] = new Rule(-6, new int[]{-6,-8,59});
    rules[4] = new Rule(-6, new int[]{-6,63,59});
    rules[5] = new Rule(-8, new int[]{});
    rules[6] = new Rule(-8, new int[]{-1});
    rules[7] = new Rule(-8, new int[]{-5,61,-1});
    rules[8] = new Rule(-1, new int[]{40,-1,41});
    rules[9] = new Rule(-1, new int[]{-1,42,-1});
    rules[10] = new Rule(-1, new int[]{-1,47,-1});
    rules[11] = new Rule(-1, new int[]{-1,43,-1});
    rules[12] = new Rule(-1, new int[]{-1,45,-1});
    rules[13] = new Rule(-1, new int[]{45,-1});
    rules[14] = new Rule(-1, new int[]{-5});
    rules[15] = new Rule(-1, new int[]{-2});
    rules[16] = new Rule(-2, new int[]{-4});
    rules[17] = new Rule(-2, new int[]{-3});
    rules[18] = new Rule(-4, new int[]{65});
    rules[19] = new Rule(-3, new int[]{66});
    rules[20] = new Rule(-5, new int[]{67});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // statements -> statements, error, ';'
#line 29 "Parser.y"
  {
			yyerrok();
		}
#line default
        break;
      case 6: // statement -> expression
#line 37 "Parser.y"
  {
			System.Console.WriteLine(ValueStack[ValueStack.Depth-1].DecimalValue);
		}
#line default
        break;
      case 7: // statement -> identifier, '=', expression
#line 41 "Parser.y"
  {
			WriteMemory(ValueStack[ValueStack.Depth-3].IdentifierValue, ValueStack[ValueStack.Depth-1].DecimalValue);
		}
#line default
        break;
      case 8: // expression -> '(', expression, ')'
#line 48 "Parser.y"
  {
			CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-2].DecimalValue;
		}
#line default
        break;
      case 9: // expression -> expression, '*', expression
#line 52 "Parser.y"
        {
            CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-3].DecimalValue * ValueStack[ValueStack.Depth-1].DecimalValue;
        }
#line default
        break;
      case 10: // expression -> expression, '/', expression
#line 56 "Parser.y"
        {
            CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-3].DecimalValue / ValueStack[ValueStack.Depth-1].DecimalValue;
        }
#line default
        break;
      case 11: // expression -> expression, '+', expression
#line 60 "Parser.y"
        {
            CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-3].DecimalValue + ValueStack[ValueStack.Depth-1].DecimalValue;
        }
#line default
        break;
      case 12: // expression -> expression, '-', expression
#line 64 "Parser.y"
        {
            CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-3].DecimalValue - ValueStack[ValueStack.Depth-1].DecimalValue;
        }
#line default
        break;
      case 13: // expression -> '-', expression
#line 68 "Parser.y"
        {
            CurrentSemanticValue.DecimalValue = -ValueStack[ValueStack.Depth-1].DecimalValue;
        }
#line default
        break;
      case 14: // expression -> identifier
#line 72 "Parser.y"
  {
			CurrentSemanticValue.DecimalValue = ReadMemory(ValueStack[ValueStack.Depth-1].IdentifierValue);
		}
#line default
        break;
      case 15: // expression -> number
#line 76 "Parser.y"
  {
			CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-1].DecimalValue;
		}
#line default
        break;
      case 16: // number -> int_literal
#line 83 "Parser.y"
  { 
			CurrentSemanticValue.DecimalValue = (decimal)ValueStack[ValueStack.Depth-1].IntValue;
		}
#line default
        break;
      case 17: // number -> decimal_literal
#line 87 "Parser.y"
        { 
            CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-1].DecimalValue;
        }
#line default
        break;
      case 18: // int_literal -> IntLiteral
#line 94 "Parser.y"
  {
			CurrentSemanticValue.IntValue = ValueStack[ValueStack.Depth-1].IntValue;
		}
#line default
        break;
      case 19: // decimal_literal -> DecimalLiteral
#line 101 "Parser.y"
  {
			CurrentSemanticValue.DecimalValue = ValueStack[ValueStack.Depth-1].DecimalValue;
		}
#line default
        break;
      case 20: // identifier -> Identifier
#line 108 "Parser.y"
  {
			CurrentSemanticValue.IdentifierValue = ValueStack[ValueStack.Depth-1].IdentifierValue;
		}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 114 "Parser.y"

private Dictionary<string, decimal> _memory = new Dictionary<string, decimal>();

public Parser(Lexer lexer) : base(lexer)
{
}

public decimal ReadMemory(string identifier)
{
	if (_memory.ContainsKey(identifier)) {
		return _memory[identifier];
	} else {
		Console.WriteLine($"Error: Unrecognized variable '{identifier}'");
		return 0;
	}
}

public void WriteMemory(string identifier, decimal value)
{
	_memory[identifier] = value;
}
#line default
}
}
